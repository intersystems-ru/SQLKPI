<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="SQLKPI.Generator">
<Description>
Generates kpi class</Description>
<Abstract>1</Abstract>
<TimeCreated>64244,40301.291978</TimeCreated>

<XData name="kpi">
<Description>
This XData definition defines the kpi.</Description>
<Data><![CDATA[
<kpi
xmlns="http://www.intersystems.com/deepsee/kpi"
 name="!!!1!!!" sourceType="sql"
 sql="!!!2!!!">
]]></Data>
</XData>

<Method name="generateKPIClass">
<Description>
do ##class(SQLKPI.Generator).generateKPIClass("SELECT name, type FROM Sample.Per", "KPIName", "try.kpi") </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>sql:%String,name:%String,class:%String</FormalSpec>
<Implementation><![CDATA[
	#dim sc As %Status = $$$OK
	
	if '##class(%Dictionary.ClassDefinition).%ExistsId(class) {
		set classObj = ##class(%Dictionary.ClassDefinition).%New(class)
		set classObj.GeneratedBy = "SQLKPI.Generator"
		set classObj.Super = "%DeepSee.KPI"
		set classObj.Description = "This kpi class was automatically generated by SQLkpi utility."
	} else {
		set classObj = ##class(%Dictionary.ClassDefinition).%OpenId(class)
		do classObj.XDatas.Clear()
	}
	
	set kpi = ##class(%Dictionary.XDataDefinition).%New(class _ ":kpi")
	set kpi.XMLNamespace = "http://www.intersystems.com/deepsee/kpi"
	
	set header = ##class(%Dictionary.XDataDefinition).IDKEYOpen($classname(), "kpi").Data.Read(10000)
	do ..ReplaceRegexp(.header, "!!!1!!!", name)
	do ..ReplaceRegexp(.header, "!!!2!!!", sql)
	do kpi.Data.WriteLine(header) 
	
	set st = ##class(%SQL.Statement).%New()
	set sc = st.%Prepare(sql)
	quit:$$$ISERR(sc) sc
	
	#dim result As %SQL.StatementResult
	set result = st.%Execute()
	
	#dim metadata As SQL.StatementMetadata
	set metadata = result.%GetMetadata()
	set columnCount = metadata.columns.Count()
	for i=1:1:columnCount {
		#dim column As %SQL.StatementColumn
		set column = metadata.columns.GetAt(i)
		do kpi.Data.WriteLine("<property name=""" _ column.colName  _ """/>")	
	}
	do kpi.Data.Write("</kpi>")
	
	do classObj.XDatas.Insert(kpi)
	
	set sc = classObj.%Save()
	return:$$$ISERR(sc) sc
	return $System.OBJ.Compile(class, "cuks /displaylog=0 /displayerror=0")
]]></Implementation>
</Method>

<Method name="ReplaceRegexp">
<Description>
Replaces all occurances of Pattern with ReplacePattern.
w $System.Status.GetErrorText(##class(SQLKPI.Generator).ReplaceRegexp(.Text))</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&Text,Pattern:%String="",ReplacePattern:%String=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#Dim Matcher As %Regex.Matcher = ##class(%Regex.Matcher).%New(Pattern, Text)
	Set Text = Matcher.ReplaceAll(ReplacePattern)
    Quit Matcher.Status
]]></Implementation>
</Method>
</Class>
</Export>
